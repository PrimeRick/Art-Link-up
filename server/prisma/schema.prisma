generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// USER MODEL
model User {
    id               String             @id @default(cuid())
    first_name       String
    last_name        String?
    username         String             @unique
    email            String             @unique
    role             RoleType?          @default(CLIENT)
    profileImage     String?            @default("https://picsum.photos/seed/picsum/200/300")
    password         String?
    headline         String?
    rating           Float              @default(0)
    location         String?
    languages        String[]
    artwork          String[]
    instagram        String?
    facebook         String?
    twitter          String?
    youtube          String?
    twitch           String?
    spotify          String?
    soundcloud       String?
    website          String?
    bio              String?
    category         String?
    work             String?
    updatedAt        DateTime           @updatedAt
    createdAt        DateTime           @default(now())
    tokens           Token[]
    provider         Provider?
    createdMessages  Message[]          @relation("sentMessages")
    conversations    ConversationUser[]
    Commission       Commission[]       @relation("clientCommission")
    artistCommission Commission[]       @relation("artistCommission")
    Package          Package[]
    AdminPayment     AdminPayment?
}

model AdminPayment {
    id       String @id @default(cuid())
    payouts  Float
    earnings Float
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String @unique
}

model Token {
    id        String    @id @default(cuid())
    token     String
    type      TokenType
    expires   DateTime
    createdAt DateTime  @default(now())
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
}

enum TokenType {
    ACCESS
    REFRESH
    RESET_PASSWORD
    VERIFY_EMAIL
}

enum RoleType {
    CLIENT
    ARTIST
    ADMIN
    SUPER_ADMIN
}

model Provider {
    id           String       @id @default(cuid())
    data         Json
    providerType ProviderType
    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String       @unique
}

enum ProviderType {
    GOOGLE
    FACEBOOK
}

model Message {
    id             String        @id @default(cuid())
    message        String
    type           String
    author         User          @relation("sentMessages", fields: [authorId], references: [id], onUpdate: Cascade)
    authorId       String
    created_at     DateTime      @default(now())
    conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    conversationId String?
    isEdited       Boolean       @default(false)
}

model Conversation {
    id              String             @id @default(cuid())
    title           String?
    messages        Message[]
    created_at      DateTime           @default(now())
    dateLastMessage DateTime?
    participants    ConversationUser[]
}

model ConversationUser {
    id             String       @id @default(cuid())
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    conversationId String
    isRead         Boolean      @default(true)
}

model Commission {
    id                String           @id @default(cuid())
    client            User             @relation("clientCommission", fields: [clientId], references: [id], onDelete: Cascade)
    clientId          String
    artist            User             @relation("artistCommission", fields: [artistId], references: [id], onDelete: Cascade)
    artistId          String
    isFinished        Boolean          @default(false)
    isReported        Boolean          @default(false)
    isPaid            Boolean          @default(false)
    refPictures       String[]
    backgroundDetails String?
    artworkDetails    String?
    package           Package          @relation(fields: [packageId], references: [id], onDelete: Cascade)
    packageId         String
    createdAt         DateTime         @default(now())
    paymentResponse   paymentResponse?
}

model paymentResponse {
    id           String     @id @default(cuid())
    response     Json?
    commission   Commission @relation(fields: [commissionId], references: [id])
    commissionId String     @unique
}

model Package {
    id             String       @id @default(cuid())
    name           PackageType
    actualname     String?
    description    String
    price          Float
    totalDays      Int
    totalRevisions Int
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    artistId       String
    artist         User         @relation(fields: [artistId], references: [id], onDelete: Cascade)
    Commission     Commission[]
}

enum PackageType {
    BASIC_PLAN
    STANDARD
    PREMIUM
}
